###
Bongo.js
Unfancy models for MongoDB

(c) 2011 Koding, Inc.

@module: bongo-client
@author: Christopher Thorn <chris@koding.com>
###
global = global or this
###
@snippet.
@description: feature-detect the browser.
@todo: is there an improvement?
###
isBrowser = 'undefined' isnt typeof window and window is global

###
@class: bongo (client)
@description: client-side bongo.
###
class bongo
  # core
  {EventEmitter} = require 'events'
  # contrib
  Traverse  = require 'traverse'
  createId  = @createId = require 'hat'
  dnode     = require 'dnode'

  bongo     = new EventEmitter

  {slice} = []

  extend = (obj, rest...)->
    for source in rest
      obj[key] = val for key, val of source
    obj
  
  @Model = class Model
    set: (data)->
      extend @, data

  @api = {}

  unless isBrowser
    @browserPath = "#{__dirname}/browser"
  
  createConstructor =(name, staticMethods, instanceMethods)->
    constructor =
      Function('createId'
        """
        return function #{name} (data) {
          data || (data = {});
          if (!('bongo_' in data)) {
            this.bongo_ = {
              instanceId: createId(),
              constructorName: "#{name}"
            };
          }
          this.set(data);
        }
        """
      ) createId
    for own methodName, method of staticMethods
      do (methodName, method)->
        constructor[methodName] = ->
          args = slice.call arguments
          wrapAll args
          method.apply constructor, args
    constructor:: = new Model
    for own methodName, method of instanceMethods
      do (methodName, method)->
        constructor::[methodName] = ->
          args = slice.call arguments
          wrapAll args
          method @, args...
          @
    constructor
  
  wrapAll =(obj)->
    new Traverse(obj).forEach (node)->
      if 'function' is typeof node
        @update wrapFn node, yes
    return

  wrapFn =(fn)->
    context = @ # TODO: this is a bugâ€”context points to global!
    ->
      args = slice.call arguments
      new Traverse(args).forEach (node)->
        if not @isLeaf and 'bongo_' of node
          model = new bongo.api[node.bongo_.constructorName] node
      fn.apply context, args
      @

  clientId_ =
    if localStorage?.clientId
      localStorage.clientId
    else
      clientId_ = createId()
      localStorage?.clientId = clientId_

  api =
    receiveServerError:(errMsg)->
      throw new Error "An error was reported by the server: "+errMsg
    
    receiveAccessError:(errMsg)->
      KD.requireLogin errMsg
    
    fetchClientId:(callback)-> 
      callback clientId_
    
    receiveBroadcast:(broadcast)->
      bongo.emit 'broadcast', broadcast

  @expose =(source)->
    for own prop, obj of source
      if api[prop]? and 'object' is typeof obj
        api[prop] = extend api[prop], obj
      else
        api[prop] = obj
    @

  @connect =(port, callback)->
    [callback, port] = [port, callback] unless callback
    client = dnode api
    client.connect port, (remote)->
      remote.fetchApi (constructors, globals)->
        for own name, fn of globals
          if global[name]? and 'object' is typeof global[name]
            global[name] = extend global[name], globals[name]
          else
            global[name] = globals[name]
        for {name, staticMethods, instanceMethods} in constructors
          bongo.api[name] = createConstructor name, staticMethods, instanceMethods
        callback bongo.api
    @
###
@snippet.
@description: export for node, or the browser, depending.
###
if not isBrowser and module
  module.exports = bongo
else
  @bongo = bongo
